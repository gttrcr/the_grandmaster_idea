#include "boards/chessboard.h"
#include <ctime>
#include <chrono>

/*
void show_help()
{
	std::cout << "example" << std::endl
			  << "[-1 max_test][-2 max_test [0-1]][-3][-4 configuration]" << std::endl
			  << "[-5 'default' n_pw n_rw n_nw n_bw n_kw n_qw n_pb n_rb n_nb n_bb n_kb n_qb][-t num_th]" << std::endl
			  << "[-6 N]" << std::endl;
	std::cout << "-1 execute max_test tests on random board to estimate the number of pieces that are captured and the number of possible positions for each piece" << std::endl;
	std::cout << "-2 execute max_test games saving them" << std::endl;
	std::cout << "-3 check the uniqueness of games generated by test -2" << std::endl;
	std::cout << "-4 make a move from a given configuration" << std::endl;
	std::cout << "-5 calculate the total number of positions (legal + illegal)" << std::endl;
	std::cout << "-6 create a board made of NxN chessboards and simulate the all games, then save all matrices as .mp4 video";
	std::cout << "-t set the number of threads to use, default is " << global_threads << std::endl;
}

using cmd_map_type = std::map<std::string, std::vector<std::string>>;
cmd_map_type produce_commands(int argc, char *argv[])
{
	cmd_map_type ret;
	for (unsigned int i = 1; i < (unsigned int)argc; i++)
	{
		std::string cmd = argv[i];
		std::vector<std::string> list;
		for (; i < (unsigned int)argc; i++)
			if (argv[i][0] != '-')
				list.push_back(argv[i]);

		ret[cmd] = list;
	}

	return ret;
}
*/

int main(int argc, char *argv[])
{
	auto start = std::chrono::high_resolution_clock::now();
	chessboard ch;
	float max = 10000;
	for (unsigned int i = 0; i < max; i++)
	{
		ch.setup();
		ch.random_play();
	}
	std::cout << (float)(std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::high_resolution_clock::now() - start).count()) / max << std::endl;
	ch.save(std::to_string(std::time(nullptr)) + ".tgi");
}