#define _CRT_SECURE_NO_WARNINGS

#include <thread>
#include <string>
#include <chrono>
#include <fstream>
#include <iterator>
#include <sstream>
#include <string>
#include <execution>
#include <regex>
#include <bitset>

#define BITSET_SIZE 14
#define COMPRESSION_OFFSET 7
#define MAX_BITSET_MATCH_SIZE 300 * BITSET_SIZE
#define MAX_FILE_SIZE_BYTE 1000000000
#define FILE_EXT ".chess"

unsigned int global_threads = std::thread::hardware_concurrency();

#include "rnd.h"
#include "utils.h"
#include "position.h"
#include "piece.h"
#include "table.h"
#include "tests/test_av_cap.h"
#include "tests/test_matches.h"
#include "tests/test_uniqueness.h"
#include "tests/test_real_match.h"
#include "tests/test_total_illegal_positions.h"

void show_help()
{
	std::cout << "example" << std::endl
			  << "[-1 max_test][-2 max_test [0-1]][-3][-4 configuration]" << std::endl
			  << "[-5 'default'-n_pw n_rw n_nw n_bw n_kw n_qw n_pb n_rb n_nb n_bb n_kb n_qb][-t num_th]" << std::endl;
	std::cout << "-1 execute max_test tests on random board to estimate the number of pieces that are captured and the number of possible positions for each piece" << std::endl;
	std::cout << "-2 execute max_test games saving them if [0-1] is 1 or not if [0-1] is 0 on, default is 1" << std::endl;
	std::cout << "-3 check the uniqueness of games generated by test -2" << std::endl;
	std::cout << "-4 make a move from a given configuration" << std::endl;
	std::cout << "-5 calculate the total number of positions (legal + illegal)" << std::endl;
	std::cout << "-t set the number of threads to use, default is " << global_threads << std::endl;
}

int main(int argc, char *argv[])
{
	if (argc == 1)
		show_help();

	//set global execution variable
	for (unsigned int i = 1; i < argc; i++)
	{
		std::string cmd = argv[i];
		if (cmd == "-t")
			global_threads = std::stoi(argv[++i]);
		if (cmd == "-h")
			show_help();
	}

	//run tests
	for (unsigned int i = 1; i < argc; i++)
	{
		std::string cmd = argv[i];
		if (cmd == "-1")
		{
			if (i + 1 < argc)
			{
				if (utils::is_number(argv[i + 1]))
					test_1_av_cap(std::stoi(argv[i + 1]));
				else
					std::cout << "-1 malformed command" << std::endl;
			}
			else
				std::cout << "-1 malformed command" << std::endl;
		}
		if (cmd == "-2")
		{
			if (i + 1 < argc)
			{
				unsigned int max_test = std::stoi(argv[i + 1]);
				bool save_all_match = true;
				if (i + 1 < argc)
				{
					if (i + 2 < argc && utils::is_number(argv[i + 2]))
						save_all_match = argv[i + 2] == "1";

					test_2_matches(max_test, save_all_match);
				}
				else
					std::cout << "-2 malformed command" << std::endl;
			}
			else
				std::cout << "-2 malformed command" << std::endl;
		}
		if (cmd == "-3")
			test_3_uniqueness();
		if (cmd == "-4")
		{
			if (i + 1 < argc)
				test_4_real_match(argv[i + 1]);
			else
				std::cout << "-4 malformed command" << std::endl;
		}
		if (cmd == "-5")
		{
			std::vector<unsigned int> args;
			while ((cmd = argv[i + 1])[0] != '-' && i < argc - 1)
			{
				if (cmd == "default")
				{
					test_5_total_illegal_positions();
					break;
				}
				else
				{
					if (utils::is_number(cmd))
						args.push_back(std::stoi(cmd));
					if (args.size() == 12)
					{
						test_5_total_illegal_positions(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]);
						break;
					}
				}
			}

			if (args.size() != 12 && args.size() != 0)
				std::cout << "-5 malformed command" << std::endl;
			i--;
		}
	}
}
